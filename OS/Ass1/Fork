#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main(void) {
    pid_t pid = 0;
    int status;

    pid = fork();

    if (pid == -1) {
        perror("Fork failed");
        return 1;
    }

    if (pid == 0) {
        // Child process
        printf("I am the Child\n");
        printf("It is the child process and pid is %d\n", getpid());

        // Correct the path to "ls"
        execl("/bin/ls", "ls", "-1", "/home/pccoe/Desktop/122B2B293/", (char*)0);

        // If execl fails
        perror("In exec(): ");
        exit(1); // exit the child process
    }

    if (pid > 0) {
        // Parent process
        printf("I am the Parent, and the pid %d.\n", getpid());
        pid = wait(&status);

        if (pid == -1) {
            perror("Wait failed");
            return 1;
        }

        printf("End of process %d ", pid);

        if (WIFEXITED(status)) {
            printf("The process ended with exit(%d).\n", WEXITSTATUS(status));
        }

        if (WIFSIGNALED(status)) {
            printf("The process ended with kill -%d.\n", WTERMSIG(status));
        }
    }

    return 0;
}
