#include <stdio.h>
#include <stdlib.h>

struct Process {
    int processID;
    int arrivalTime;
    int burstTime;
    int remainingTime;
};

void swap(struct Process *a, struct Process *b) {
    struct Process temp = *a;
    *a = *b;
    *b = temp;
}

void sortByArrivalTime(struct Process *processes, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrivalTime > processes[j + 1].arrivalTime) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

void roundRobin(struct Process *processes, int n, int timeQuantum) {
    int currentTime = 0;
    int *waitingTime = (int *)malloc(n * sizeof(int));
    int *turnaroundTime = (int *)malloc(n * sizeof(int));

    for (int i = 0; i < n; i++) {
        processes[i].remainingTime = processes[i].burstTime;
        waitingTime[i] = 0;
        turnaroundTime[i] = 0;
    }

    int completed = 0;
    int currentIndex = 0;

    while (completed < n) {
        if (processes[currentIndex].remainingTime > 0) {
            int executionTime = (processes[currentIndex].remainingTime < timeQuantum)
                                    ? processes[currentIndex].remainingTime
                                    : timeQuantum;

            processes[currentIndex].remainingTime -= executionTime;
            currentTime += executionTime;

            if (processes[currentIndex].remainingTime == 0) {
                turnaroundTime[currentIndex] = currentTime - processes[currentIndex].arrivalTime;
                waitingTime[currentIndex] = turnaroundTime[currentIndex] - processes[currentIndex].burstTime;
                completed++;
            }
        }

        currentIndex = (currentIndex + 1) % n;
    }

    // Calculate average waiting time and turnaround time
    float avgWaitingTime = 0, avgTurnaroundTime = 0;
    for (int i = 0; i < n; i++) {
        avgWaitingTime += waitingTime[i];
        avgTurnaroundTime += turnaroundTime[i];
    }

    avgWaitingTime /= n;
    avgTurnaroundTime /= n;

    // Display results
    printf("\nProcess\t\t|Burst Time\t|Arrival Time\t|Waiting Time\t|Turnaround Time");

    for (int i = 0; i < n; i++) {
        printf("\nP[%d]\t\t|%d\t\t|%d\t\t|%d\t\t|%d", processes[i].processID, processes[i].arrivalTime,
               processes[i].burstTime, waitingTime[i], turnaroundTime[i]);
    }

    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);

    // Free allocated memory
    free(waitingTime);
    free(turnaroundTime);
}

int main() {
    int n, timeQuantum;

    printf("Enter the Number of Processes: ");
    scanf("%d", &n);

    struct Process *processes = (struct Process *)malloc(n * sizeof(struct Process));

    printf("Enter Time Quantum for Round Robin: ");
    scanf("%d", &timeQuantum);

    printf("Enter Arrival Time and Burst Time for each Process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].processID = i + 1;
        printf("Process %d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrivalTime);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burstTime);
    }

    // Sort processes by arrival time
    sortByArrivalTime(processes, n);

    // Execute Round Robin algorithm
    roundRobin(processes, n, timeQuantum);

    // Free allocated memory
    free(processes);

    return 0;
}
